#!/usr/bin/env bash

if [ -z ${BuildPlatform+x} ]; then
    BuildPlatform=linux
fi

if [ -z ${BuildArchitecture+x} ]; then
    BuildArchitecture=x64
fi

ProjectRoot="$( cd "$(dirname "$0")" ; pwd -P)" # Directory in which the script is located

BuildDirectory="${ProjectRoot}/bin/${BuildPlatform}/${BuildArchitecture}"
mkdir -p ${BuildDirectory}

VersionNumberOld=$(< ./version)
VersionNumber=$((${VersionNumberOld} + 1))
echo ${VersionNumber} > ./version

sed -i "s/^[[:space:]]\* Version: .*$/ * Version: ${VersionNumber}/" nlib.h

pushd ${BuildDirectory} > /dev/null
echo "Entering directory \`$(pwd)'"

# .....................................................................
# BUILD
# `````````````````````````````````````````````````````````````````````

# NOTE(naman): The RUNPATH is not set for the game.so file. Instead, it is set so that any user
# may drop libGL.so or such in the directory to inject custom code for modding.

# For Address Sanitizer: -fsanitize=address -fno-omit-frame-pointer
#     Memory Sanitizer : -fsanitize=memory -fno-optimize-sibling-calls -fno-omit-frame-pointer -fsanitize-memory-track-origins

echo "C Build ==============================================================="

CSource="${ProjectRoot}/test.c"
CTarget="test.c.elf"
CTargetPath="${BuildDirectory}/${CTarget}"

if [ -f "${CTargetPath}" ]; then
    rm "${CTargetPath}"
fi

CCompiler="clang"
CWarningFlags="-Weverything -Wpedantic -pedantic-errors -Werror \
               -Wno-c++98-compat \
              "
CCompilerFlags="-g3 -O0 -fno-strict-aliasing -fwrapv -msse2 \
               "
CLanguageFlags="--std=c18 -DBUILD_INTERNAL -DBUILD_SLOW -DBUILD_DEBUG \
                -DBUILD_NUMBER=${NEW_BUILD_NUMBER} \
                -D_POSIX_C_SOURCE=200809L -D_DEFAULT_SOURCE \
               "
CLinkerFlags="-o ${CTargetPath} \
              -static-libgcc -pthread \
              -Wl,-rpath=\${ORIGIN} -Wl,-z,origin -Wl,--enable-new-dtags \
             "

${CCompiler} ${CCompilerFlags} ${CLanguageFlags} ${CWarningFlags} \
             ${CSource} \
             ${CLinkerFlags}


echo "C++ Build ============================================================="

CPPSource="${ProjectRoot}/test.cpp"
CPPTarget="test.cpp.elf"
CPPTargetPath="${BuildDirectory}/${CPPTarget}"

if [ -f "${CPPTargetPath}" ]; then
    rm "${CPPTargetPath}"
fi


CPPCompiler="clang++"
CPPWarningFlags="-Weverything -Wpedantic -pedantic-errors -Werror \
                 -Wno-old-style-cast -Wno-c++98-compat-pedantic \
                 -Wno-writable-strings -Wno-zero-length-array \
                 -Wno-c++20-designator -Wno-gnu-anonymous-struct \
                "
CPPCompilerFlags="-g3 -O0 -fno-strict-aliasing -fwrapv -msse2 \
                 "
CPPLanguageFlags="--std=c++14 -DBUILD_INTERNAL -DBUILD_SLOW -DBUILD_DEBUG \
                  -DBUILD_NUMBER=${NEW_BUILD_NUMBER} \
                  -D_POSIX_C_SOURCE=200809L -D_DEFAULT_SOURCE \
                 "
CPPLinkerFlags="-o ${CPPTargetPath} \
                -static-libgcc -static-libstdc++ -pthread \
                -Wl,-rpath=\${ORIGIN} -Wl,-z,origin -Wl,--enable-new-dtags \
               "

${CPPCompiler} ${CPPCompilerFlags} ${CPPLanguageFlags} ${CPPWarningFlags} \
               ${CPPSource} \
               ${CPPLinkerFlags}


popd > /dev/null
